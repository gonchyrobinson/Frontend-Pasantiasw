---
alwaysApply: true
description: Module organization rules for React components and TypeScript files
---

# Module Organization Rules

## **Four Essential Rules for Module Structure**

When working with any module (e.g., `@Empresas/`, `@Inicio/`, `@Login/`, `@CreacionUsuarios/`), follow these **4 mandatory rules**:

### **1. StyledComponents.tsx Rule**
- **Location**: `src/modules/[ModuleName]/components/StyledComponents.tsx`
- **Purpose**: Centralize all styled components with `sx` properties
- **Content**: All MUI components that use `sx` prop for styling
- **Naming**: Use descriptive names ending with `Styled` (e.g., `ContenedorPrincipalStyled`, `TarjetaEstadisticaStyled`)
- **Reference**: [StyledComponents.tsx](mdc:src/modules/Inicio/components/StyledComponents.tsx)

### **2. ComponentesGenericos.tsx Rule**
- **Location**: `src/modules/[ModuleName]/components/ComponentesGenericos.tsx`
- **Purpose**: House reusable MUI components with custom logic (NOT just `sx`)
- **Content**: Components with properties like `elevation`, `fullWidth`, `variant`, etc.
- **Naming**: Use descriptive names without `Styled` suffix (e.g., `ContenedorPrincipal`, `TarjetaEstadistica`)
- **Reference**: [ComponentesGenericos.tsx](mdc:src/modules/Inicio/components/ComponentesGenericos.tsx)

### **3. Types Organization Rule**
- **Location**: `src/modules/[ModuleName]/types/index.ts`
- **Purpose**: Centralize all TypeScript interfaces and types for the module
- **Content**: All interfaces, types, enums, and type definitions
- **Naming**: Use PascalCase for interfaces and types (e.g., `EmpresaDto`, `LoginCredentials`)
- **Reference**: [types/index.ts](mdc:src/modules/Inicio/types/index.ts)

### **4. Helpers Organization Rule**
- **Location**: `src/modules/[ModuleName]/helpers/[feature]Helpers.ts`
- **Purpose**: Extract business logic and complex functions from components
- **Content**: Pure functions, data processing, validation logic, metadata generation
- **Naming**: Use camelCase with descriptive names (e.g., `getEmpresaMetadata`, `filterEmpresas`)
- **Reference**: [statsHelpers.ts](mdc:src/modules/Inicio/helpers/statsHelpers.ts)

## **Implementation Guidelines**

### **When to Use Each File**:
- **StyledComponents.tsx**: Components with `sx` prop for styling
- **ComponentesGenericos.tsx**: Components with other MUI props (elevation, variant, etc.)
- **types/index.ts**: All TypeScript interfaces and type definitions
- **helpers/[feature]Helpers.ts**: Business logic and data processing functions

### **Component Extraction Priority**:
1. **First**: Extract components with `sx` to `StyledComponents.tsx`
2. **Second**: Extract components with other MUI props to `ComponentesGenericos.tsx`
3. **Third**: Extract interfaces to `types/index.ts`
4. **Fourth**: Extract business logic to `helpers/[feature]Helpers.ts`

### **Import Organization**:
```typescript
// Import styled components from StyledComponents
import { ContenedorPrincipalStyled } from './StyledComponents';

// Import generic components from ComponentesGenericos
import { ContenedorPrincipal } from './ComponentesGenericos';

// Import types from types directory
import { StatItem } from '../types';

// Import helpers from helpers directory
import { calculateStats } from '../helpers/statsHelpers';
```

### **Code Quality Standards**:
- Keep components simple, short, and functional
- Use meaningful names for all exports
- Maintain consistent naming conventions
- Avoid inline `sx` props in main component files
- Extract complex logic to helper functions
- Use proper TypeScript types throughout